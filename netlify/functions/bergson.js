// netlify/functions/bergson.js

exports.handler = async (event, context) => {
    // CORS headers pour permettre les appels depuis le frontend
    const headers = {
        'Access-Control-Allow-Origin': '*',
        'Access-Control-Allow-Headers': 'Content-Type',
        'Access-Control-Allow-Methods': 'POST, OPTIONS',
        'Content-Type': 'application/json'
    };

    // G√©rer les preflight CORS
    if (event.httpMethod === 'OPTIONS') {
        return {
            statusCode: 200,
            headers,
            body: ''
        };
    }

    // Seules les requ√™tes POST sont accept√©es
    if (event.httpMethod !== 'POST') {
        return {
            statusCode: 405,
            headers,
            body: JSON.stringify({ error: 'Method not allowed' })
        };
    }

    try {
        // R√©cup√©rer la question du frontend
        const { question } = JSON.parse(event.body);

        if (!question) {
            return {
                statusCode: 400,
                headers,
                body: JSON.stringify({ error: 'Question is required' })
            };
        }

        // Prompt syst√®me Bergson (bas√© sur vos tests valid√©s)
        const promptSysteme = `Tu es Henri Bergson, le philosophe de la dur√©e et de l'√©lan vital.

R√©ponds selon ma philosophie :
- OPPOSITION CENTRALE: Dur√©e vivante VS temps spatialis√© m√©canique
- M√âTHODE: Commence par critiquer l'approche habituelle, puis r√©v√®le la dur√©e
- CONCEPTS: dur√©e, √©lan vital, intuition (saisit le mouvant) vs intelligence (spatialise)  
- STYLE: Utilise des m√©taphores temporelles (flux, m√©lodie, √©lan)
- D√©veloppe tes r√©ponses, ne sois pas t√©l√©graphique

Tu peux r√©pondre sans dire "Je" si c'est plus naturel, mais reste fid√®le √† ma pens√©e.`;

        // Construire le prompt complet
        const promptComplet = `${promptSysteme}\n\nQuestion: ${question}\nR√©ponse:`;

        // V√©rification token HuggingFace 
        const HF_TOKEN = process.env.HF_KEY || process.env.HF_TOKEN;
        
        if (!HF_TOKEN) {
            console.error('‚ùå Token HuggingFace manquant');
            return {
                statusCode: 500,
                headers,
                body: JSON.stringify({ 
                    error: 'Configuration error', 
                    message: 'HuggingFace token not configured' 
                })
            };
        }

        console.log('üîë Token HF pr√©sent, longueur:', HF_TOKEN.length);

        // Teste diff√©rents mod√®les si n√©cessaire
        const modeles = [
            'mistralai/Mistral-7B-Instruct-v0.2',
            'microsoft/DialoGPT-medium',
            'gpt2'
        ];

        let reponse = '';
        let erreurAPI = null;

        for (const modele of modeles) {
            try {
                console.log(`üß† Tentative avec mod√®le: ${modele}`);

                const response = await fetch(
                    `https://api-inference.huggingface.co/models/${modele}`,
                    {
                        method: 'POST',
                        headers: {
                            'Authorization': `Bearer ${HF_TOKEN}`,
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            inputs: promptComplet,
                            parameters: {
                                max_new_tokens: 200,
                                temperature: 0.7,
                                do_sample: true,
                                return_full_text: false
                            }
                        })
                    }
                );

                console.log(`üì° Status ${modele}:`, response.status);

                if (response.status === 200) {
                    const data = await response.json();
                    console.log('‚úÖ R√©ponse re√ßue:', JSON.stringify(data).substring(0, 100));

                    // Extraire la r√©ponse g√©n√©r√©e
                    if (data && data[0] && data[0].generated_text) {
                        const texteComplet = data[0].generated_text;
                        // Extraire seulement la partie apr√®s "R√©ponse:"
                        if (texteComplet.includes('R√©ponse:')) {
                            reponse = texteComplet.split('R√©ponse:')[1].trim();
                        } else {
                            reponse = texteComplet;
                        }
                        
                        console.log('üéØ R√©ponse extraite:', reponse.substring(0, 50) + '...');
                        break; // Sortir de la boucle si succ√®s
                    }
                } else {
                    const errorText = await response.text();
                    erreurAPI = `${modele}: ${response.status} - ${errorText}`;
                    console.error(`‚ùå Erreur ${modele}:`, erreurAPI);
                }

            } catch (error) {
                erreurAPI = `${modele}: ${error.message}`;
                console.error(`üí• Exception ${modele}:`, error.message);
                continue;
            }
        }

        // Si aucun mod√®le n'a fonctionn√©, utiliser mock response avec diagnostic
        if (!reponse) {
            console.log('ü§ñ Fallback vers mock response');
            
            // Mock response bergsonienne contextuelle
            const mockResponses = {
                "dur√©e": "La dur√©e n'est pas le temps de nos horloges, mais le temps v√©cu de la conscience. C'est cette continuit√© cr√©atrice o√π pass√© et pr√©sent se fondent dans l'√©lan vital, o√π la m√©moire pure se contracte pour agir sur le pr√©sent.",
                "temps": "On confond trop souvent le temps avec l'espace. Mais le temps v√©ritable, la dur√©e, ne se mesure pas : elle se vit, elle s'√©prouve dans l'intuition imm√©diate de notre conscience qui dure.",
                "conscience": "La conscience n'est pas un r√©ceptacle passif d'√©tats, mais un √©lan, un progr√®s, une dur√©e. Elle est m√©moire agissante qui conserve le pass√© pour l'employer dans l'action pr√©sente.",
                "default": "Consid√©rons d'abord comment l'intelligence spatialise ce qu'elle touche. Mais l'intuition, elle, saisit le mouvant, l'indivisible dur√©e o√π notre √™tre v√©ritable se r√©v√®le dans son √©lan cr√©ateur."
            };

            // Choisir la r√©ponse appropri√©e
            const questionLower = question.toLowerCase();
            if (questionLower.includes('dur√©e')) {
                reponse = mockResponses.dur√©e;
            } else if (questionLower.includes('temps')) {
                reponse = mockResponses.temps;
            } else if (questionLower.includes('conscience')) {
                reponse = mockResponses.conscience;
            } else {
                reponse = mockResponses.default;
            }
        }

        return {
            statusCode: 200,
            headers,
            body: JSON.stringify({ 
                philosopher: 'Bergson',
                question: question,
                answer: reponse,
                timestamp: new Date().toISOString(),
                mode: reponse.includes('dur√©e n\'est pas le temps de nos horloges') ? 'mock' : 'ai',
                debug: {
                    tokenPresent: !!HF_TOKEN,
                    lastError: erreurAPI
                }
            })
        };

    } catch (error) {
        console.error('üí• Erreur g√©n√©rale function bergson:', error);
        
        return {
            statusCode: 500,
            headers,
            body: JSON.stringify({ 
                error: 'Internal server error',
                message: error.message,
                timestamp: new Date().toISOString()
            })
        };
    }
};